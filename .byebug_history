c
exit
sum
exit
sel
game.deck.sum(self.cards)
exit
nomral_cards .map{ |card| card.points } .reduce(:+)
nomral_cards.map{ |card| card.points } .reduce(:+)
nomral_cards.map{ |card| card.points }.reduce(:+)
nomral_cards.map { |card| card.points }.reduce(:+)
nomral_cards.map { |card| card.points }
nomral_cards.pluck(:points)
nomral_cards
nomral_cards.
[0, 1].reduce(:+)
[].reduce(:+)
[].sum
nomral_cards.sum {|card| card.points }
normal_cards.sum {|card| card.points }
normal.cards.summ {|card| card.points }
cards
nomral_cards
normal_cards
a_cards
exit
cards.
self.cards
cards
game
game.deck
deck
cards
a_cards = cards.select { |card| card.rank == 'A' }
cards
exit
cards
a_cards
a_cards = cards.select! { |card| card.rank == 'A' }
cards
exit
a_cards = cards.select! { |card| card.rank == 'A' }
cards
a_cards
a_cards = cards.select! { |card| card.rank == 'A' }
cards
a_cards
a_cards = cards.reject { |card| card.rank == 'A' }
cards.reject { |card| card.rank == 'A' }
cards.select{ |card| card.rank != 'A' }
cards.select
cards.filter
cards
cards.filter { |card| card.rank != 'A' }
c
bank= 1c
bank= 1
bank
exit
exi
clear
cards.each
cards
cards[0]
cards
c
cards[0].points
cards[0].pouits
cards[0].pounts
cards[0]
cards
exit
clear
game.bank
bank
c
player.cards
c
player.cards
dealer.cards
dealer.cards.count
dealer.cards.count.times
c
2.times.map { '*' }
dealer.cards.count.times.map { '*' }
c
dealer.cards
dealer_cards
dealer.cards.count.times { return '*' }
dealer_cards
exit
c
card.to_i
card
exit
card
c
player
exit
player
c
dealer
player
exit
deck.cards.length
deck.reserved_cards
deck
deck.give_cards(2)
exit
c
self.cards.length
rand(10)
rand
random
self.cards.sample
self.cards.example
self.cards
self
receiver
exit
c
deck.cards
deck
c
self.cards
self.card
self
c
deck.cards
deck.methods
deck
c
player.name.nil?
player
c
player
c
self
@player
player.class
player
player.get_name
player.name
player.object_id
self.player.object_id
self.player
player
